import requests
from django.core.management.base import BaseCommand
from django.conf import settings
from movies.models import Film, FilmFrame
import time


class Command(BaseCommand):
    help = 'Load top 50 movies from Kinopoisk with frames'

    def handle(self, *args, **options):
        KINOPOISK_API_KEY = getattr(settings, 'KINOPOISK_API_KEY', '')

        if not KINOPOISK_API_KEY:
            self.stderr.write('‚ùå KINOPOISK_API_KEY not found in settings.py')
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤
        movies_url = 'https://api.kinopoisk.dev/v1.4/movie'
        headers = {
            'X-API-KEY': KINOPOISK_API_KEY,
            'Accept': 'application/json'
        }

        params = {
            'page': 7,
            'limit': 50,
            'lists': 'top250',
            'sortField': 'rating.kp',
            'sortType': '-1',
            'selectFields': ['name', 'year', 'poster', 'description', 'persons', 'id', 'rating', 'countries']
        }

        try:
            response = requests.get(movies_url, headers=headers, params=params)
            response.raise_for_status()
            data = response.json()

            for movie_data in data.get('docs', []):
                try:
                    self.process_movie(movie_data, headers)
                    time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

                except Exception as e:
                    self.stderr.write(f'‚ùå Error processing movie: {e}')
                    continue

        except Exception as e:
            self.stderr.write(f'‚ùå API error: {e}')

    def process_movie(self, movie_data, headers):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∏–ª—å–º –∏ –µ–≥–æ –∫–∞–¥—Ä—ã"""
        kinopoisk_id = movie_data.get('id')
        title = movie_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        year = movie_data.get('year', 0)

        self.stdout.write(f'üé¨ Processing: {title} ({year})')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–µ—Ä
        poster_url = ''
        if movie_data.get('poster'):
            poster_url = movie_data.get('poster', {}).get('url', '')

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –∏ –∞–∫—Ç–µ—Ä–æ–≤
        director = self.get_director(movie_data.get('persons', []))
        actors = self.get_actors(movie_data.get('persons', []))

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å–º
        film, created = Film.objects.update_or_create(
            kinopoisk_id=kinopoisk_id,
            defaults={
                'title': title,
                'year': year,
                'poster_url': poster_url,
                'plot': movie_data.get('description', ''),
                'director': director,
                'actors': actors,
                'rating': movie_data.get('rating', {}).get('kp', 0),
                'country': movie_data.get('countries', '').name,
            }
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–¥—Ä—ã –∏–∑ —Ñ–∏–ª—å–º–∞
        self.load_frames(film, kinopoisk_id, headers)

        if created:
            self.stdout.write(f'‚úÖ Added: {title}')
        else:
            self.stdout.write(f'‚ö° Updated: {title}')

    def load_frames(self, film, kinopoisk_id, headers):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–¥—Ä—ã –¥–ª—è —Ñ–∏–ª—å–º–∞"""
        frames_url = f'https://api.kinopoisk.dev/v1.4/image'

        params = {
            'movieId': kinopoisk_id,
            'limit': 10,  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞–¥—Ä–æ–≤
            'type': 'still',  # –ö–∞–¥—Ä—ã –∏–∑ —Ñ–∏–ª—å–º–∞
        }

        try:
            response = requests.get(frames_url, headers=headers, params=params)
            response.raise_for_status()
            frames_data = response.json()

            for frame_data in frames_data.get('docs', [])[:5]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–¥—Ä–æ–≤
                image_url = frame_data.get('url', '')
                if image_url:
                    FilmFrame.objects.get_or_create(
                        film=film,
                        image_url=image_url,
                        defaults={'description': f'–ö–∞–¥—Ä –∏–∑ {film.title}'}
                    )

            self.stdout.write(f'   üì∏ Loaded {len(frames_data.get("docs", []))} frames')

        except Exception as e:
            self.stderr.write(f'   ‚ùå Error loading frames: {e}')

    def get_director(self, persons):
        """–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞"""
        for person in persons:
            if person.get('profession') == '—Ä–µ–∂–∏—Å—Å–µ—Ä—ã':
                return person.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'

    def get_actors(self, persons):
        """–ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤"""
        actors = []
        for person in persons:
            if person.get('profession') == '–∞–∫—Ç–µ—Ä—ã' and len(actors) < 3:
                actors.append(person.get('name', ''))
        return ', '.join(actors)